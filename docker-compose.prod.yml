# Docker Compose for production deployment
# This file provides production-optimized configuration

version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: knowledgebase-postgres-prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
      # Mount backup directory for production backups
      - ./postgres_backups:/backups
    environment:
      - POSTGRES_DB=knowledgebase
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - knowledgebase-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d knowledgebase"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Production optimizations
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.optimized
    container_name: knowledgebase-backend-prod
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - database_data:/app/data
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/knowledgebase
      - CORS_ORIGINS=https://yourdomain.com
      - DEBUG=false
      - LOG_LEVEL=INFO
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - knowledgebase-network
    restart: unless-stopped
    # Production optimizations
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: knowledgebase-frontend-prod
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://yourdomain.com/api
    depends_on:
      - backend
    networks:
      - knowledgebase-network
    restart: unless-stopped
    # Production optimizations
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Optional: Add a reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: knowledgebase-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - knowledgebase-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  database_data:
    driver: local

networks:
  knowledgebase-network:
    driver: bridge
